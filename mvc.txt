MVC stands for Model View Controller. MVC is an architecture for rendering web applications to end users. MVC is a tripartite system that breaks down into three appropriately-named parts; the model, the view, and the controller.

The model is the "meat" of the architecture, the back-end of the program that really does all the things the user wants. When you log onto a site that uses MVC, such as, for example, a blogging platform, and view a blog, you are requesting content based on certain parameters. The model part of the MVC is the part that stores, modifies, and represents data. When you play a game on a website that uses MVC architecture, the scripts that run the game, the AI for the enemies, the pictures for the graphics, the stats for your user account, are all part of the model.

The view part of the MVC architecture is the part that deals with what you see. The view takes all of the information that is to be presented to the user - information that comes from the model -and resolves it in such a way that it can be sent to a client (e.g. a browser) and then viewed. The pictures that make up the in-game graphics may be a part of the model, but the scripts and functions that allow those pictures to be arranged and presented to you the right way on the webpage are part of the view. The templating engines and formatting and other cosmetic parts of the architecture are part of the view, and they are what communicate directly with your browser.

The controller is the most recondite part of the MVC architecture. The controller is the part of the MVC that takes the user's commands, sends information to the model so that the model can mutate its state accordingly, and chooses which models get what information. If the model is the hub of a wheel, and the view is the rim, then the controller is the spokes of the wheel that connect the rim and the hub so that the whole wheel can turn and be useful.

When you make a request of a system that uses the MVC architeture, the request is taken by the controller and passed to the model. The controller packages and presents the information you send it in a form that the model can understand, and the model then returns a view, which interacts with the client software (again, this is often a web browser) to create the stuff you see on the screen.
